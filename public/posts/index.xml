<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Leander Peter</title><link>https://leanderpeter.de/posts/</link><description>Recent content in Posts on Leander Peter</description><generator>Hugo -- 0.147.8</generator><language>en-us</language><lastBuildDate>Sun, 29 Jun 2025 10:00:00 +0100</lastBuildDate><atom:link href="https://leanderpeter.de/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Why MCP Doesn’t Work: Lessons from the Trenches at FINN</title><link>https://leanderpeter.de/posts/why-mcp-doesnt-work/</link><pubDate>Sun, 29 Jun 2025 10:00:00 +0100</pubDate><guid>https://leanderpeter.de/posts/why-mcp-doesnt-work/</guid><description>&lt;p>When we first heard of function calling (MCP), we at the Customer Ops Team thought we’d found the silver bullet for customer care, finally! MCP (Model Context Protocol) promised a dream: giving our Slack chatbot (beloved Finny) the power to autonomously call any API, figure out exactly which endpoints to use, and seamlessly answer complex customer questions.&lt;/p>
&lt;p>For context: FINN is a car subscription which handles the complexity of car ownership for B2C and B2B customers. Behind the scenes, that means hundreds of internal APIs powering everything from booking to billing, logistics to support.&lt;/p></description></item></channel></rss>